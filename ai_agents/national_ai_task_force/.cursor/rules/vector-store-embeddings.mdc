---
description: Standards for AstraDB vector stores and embedding models in the National AI Task Force project
globs: *.py
alwaysApply: false
---
---
description: Standards for AstraDB vector stores and embedding models in the National AI Task Force project
globs: *.py
alwaysApply: false
---
# AstraDB Vector Store and Embedding Models

<rule>
name: vector_store_embeddings
description: Standards for implementing and using AstraDB vector stores and embedding models in the project

filters:
  # Match Python files
  - type: file_extension
    pattern: "\\.py$"
  # Match files that use vector stores or embeddings
  - type: content
    pattern: "(?s)(vector_?store|embedding|AstraDB|HuggingFaceEmbeddings)"

actions:
- type: suggest
  message: |
  ## Vector Store Standards
  
  The National AI Task Force project uses the following vector store standards:
  
  1. **Primary Vector Store**: `AstraDBVectorStore` from LangChain AstraDB
     - Cloud-based vector database with high scalability
     - Persistent storage in the cloud
     - Optimized for fast retrieval operations
     - Average query time: ~0.1-0.2 seconds for typical queries
  
  2. **Document Processing**:
     - Chunk size: 1000 characters
     - Chunk overlap: 200 characters
     - Use `RecursiveCharacterTextSplitter` for document splitting
     - Use `PyMuPDF4LLMLoader` for loading PDF documents by page
     - Typical processing time: ~20-25 seconds for initial creation
  
  3. **Storage Configuration**:
     - AstraDB Collection: `national_ai_task_force`
     - Connection via API endpoint and application token
     - Environment variables: `ASTRADB_ENDPOINT`, `ASTRADB_TOKEN`, `ASTRADB_COLLECTION_NAME`
  
  ## Embedding Models
  
  The project uses the following embedding models:
  
  1. **Primary Embedding Model**: `sentence-transformers/all-MiniLM-L6-v2`
     - High-quality general-purpose embeddings
     - Used via `HuggingFaceEmbeddings` from LangChain
     - Loading time: ~4-5 seconds on first initialization
  
  ## Performance Metrics
  
  The AstraDB implementation provides significant performance improvements:
  
  1. **Query Performance**:
     - Average search time: 0.1-0.2 seconds
     - Consistent performance regardless of vector store size
     - Scales well with increasing document count
  
  2. **Cloud Benefits**:
     - No local storage requirements
     - Automatic scaling and management
     - Accessible from anywhere
     - No need to manage index files
  
  3. **Persistence Benefits**:
     - One-time creation cost (~20-25 seconds)
     - Persistent storage in the cloud
     - No need to rebuild on application restart
  
  ## Implementation Guidelines
  
  When working with AstraDB vector stores and embeddings:
  
  1. **Initialization Pattern**:
     - Always check for existing collection before creating a new one
     - Use try/except blocks for robust error handling
     - Implement performance timing for operations
     - Log detailed information about each step
  
  2. **Resource Management**:
     - Initialize the vector store only once and reuse it
     - Use the singleton pattern to avoid reloading
     - Properly handle resources to prevent memory leaks
  
  3. **Error Handling**:
     - Add comprehensive error handling for all operations
     - Implement fallback mechanisms for critical failures
     - Log detailed error information for debugging
  
  4. **Security Considerations**:
     - Store API keys and tokens in environment variables
     - Never hardcode credentials in the code
     - Use proper authentication methods

examples:
- input: |
  # Example of correct AstraDB vector store implementation
  
  import time
  import os
  from langchain_huggingface import HuggingFaceEmbeddings
  from langchain_astradb import AstraDBVectorStore
  from langchain.schema import Document
  
  # Constants
  CHUNK_SIZE = 1000
  CHUNK_OVERLAP = 200
  EMBEDDING_MODEL = "sentence-transformers/all-MiniLM-L6-v2"
  
  # AstraDB Configuration
  ASTRA_DB_API_ENDPOINT = os.getenv("ASTRADB_ENDPOINT")
  ASTRA_DB_APPLICATION_TOKEN = os.getenv("ASTRADB_TOKEN")
  ASTRA_DB_COLLECTION_NAME = os.getenv("ASTRADB_COLLECTION_NAME", "national_ai_task_force")
  
  # Initialize embeddings
  embeddings = HuggingFaceEmbeddings(model_name=EMBEDDING_MODEL)
  
  # Check if the collection already exists
  if ASTRA_DB_COLLECTION_NAME in AstraDBVectorStore.list_collections():
      # Connect to existing collection
      start_time = time.time()
      vector_store = AstraDBVectorStore(
          api_endpoint=ASTRA_DB_API_ENDPOINT,
          application_token=ASTRA_DB_APPLICATION_TOKEN,
          collection_name=ASTRA_DB_COLLECTION_NAME,
          embedding=embeddings
      )
      connect_time = time.time() - start_time
      print(f"Connected to existing collection in {connect_time:.4f} seconds")
  else:
      # Create new collection
      start_time = time.time()
      documents = load_documents()  # Your document loading function
      vector_store = AstraDBVectorStore.from_documents(
          documents=documents,
          embedding=embeddings,
          api_endpoint=ASTRA_DB_API_ENDPOINT,
          application_token=ASTRA_DB_APPLICATION_TOKEN,
          collection_name=ASTRA_DB_COLLECTION_NAME,
          namespace=""
      )
      create_time = time.time() - start_time
      print(f"Created collection in {create_time:.4f} seconds")
  
  # Perform optimized search
  query = "What are the key recommendations?"
  search_start = time.time()
  results = vector_store.similarity_search_with_score(query, k=5)
  search_time = time.time() - search_start
  print(f"Search completed in {search_time:.4f} seconds")
  
  output: "Correctly implemented AstraDB vector store with performance monitoring"

- input: |
  # Example of singleton pattern for AstraDB vector store
  
  class VectorStoreManager:
      """
      Singleton manager for AstraDB vector store to ensure
      it's only initialized once across the application.
      """
      _instance = None
      _vector_store = None
      
      def __new__(cls):
          if cls._instance is None:
              cls._instance = super(VectorStoreManager, cls).__new__(cls)
              cls._instance._initialize_vector_store()
          return cls._instance
      
      def _initialize_vector_store(self):
          """Initialize the AstraDB vector store with proper error handling."""
          try:
              # Initialize embeddings
              self.embeddings = HuggingFaceEmbeddings(
                  model_name=EMBEDDING_MODEL
              )
              
              # Check AstraDB credentials
              if not ASTRA_DB_API_ENDPOINT or not ASTRA_DB_APPLICATION_TOKEN:
                  raise ValueError("AstraDB credentials not found. Please set ASTRADB_ENDPOINT and ASTRADB_TOKEN environment variables.")
              
              # Connect to AstraDB
              start_time = time.time()
              self._vector_store = AstraDBVectorStore(
                  api_endpoint=ASTRA_DB_API_ENDPOINT,
                  application_token=ASTRA_DB_APPLICATION_TOKEN,
                  collection_name=ASTRA_DB_COLLECTION_NAME,
                  embedding=self.embeddings
              )
              connect_time = time.time() - start_time
              logger.info(f"Connected to AstraDB in {connect_time:.4f} seconds")
              
              # Check if collection has documents
              doc_count = self._vector_store.collection_count()
              if doc_count == 0:
                  logger.info("Collection is empty, creating documents...")
                  documents = self._load_documents()
                  start_time = time.time()
                  self._vector_store.add_documents(documents)
                  create_time = time.time() - start_time
                  logger.info(f"Added documents to collection in {create_time:.4f} seconds")
          except Exception as e:
              logger.error(f"Error initializing vector store: {e}")
              raise
      
      def get_vector_store(self):
          """Get the initialized vector store instance."""
          if self._vector_store is None:
              raise ValueError("Vector store not initialized")
          return self._vector_store
      
      def search(self, query, k=5):
          """
          Perform optimized search with performance monitoring.
          
          Args:
              query: The search query
              k: Number of results to return
              
          Returns:
              List of search results with scores
          """
          if self._vector_store is None:
              raise ValueError("Vector store not initialized")
              
          try:
              start_time = time.time()
              results = self._vector_store.similarity_search_with_score(query, k=k)
              search_time = time.time() - start_time
              logger.info(f"Search completed in {search_time:.4f} seconds")
              return results
          except Exception as e:
              logger.error(f"Search error: {e}")
              raise
  
  # Usage
  vector_store_manager = VectorStoreManager()
  results = vector_store_manager.search("What are the key recommendations?")
  
  output: "Correctly implemented singleton pattern for AstraDB vector store with performance monitoring"

metadata:
  priority: high
  version: 3.0
</rule> 